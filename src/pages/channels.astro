---
import Layout from '@/layouts/Layout.astro';
import ChannelBadge from '@/components/ChannelBadge.astro';
import { getChannels, formatTimeAgo } from '@/lib/data';
import '../styles/global.css';

const channels = getChannels();
const channelEntries = Object.entries(channels);

// Group channels by category
const channelsByCategory = channelEntries.reduce((acc, [id, channel]) => {
  const category = channel.category;
  if (!acc[category]) {
    acc[category] = [];
  }
  acc[category].push({ id, ...channel });
  return acc;
}, {} as Record<string, Array<{id: string} & typeof channels[string]>>);

const categories = Object.keys(channelsByCategory).sort();
---

<Layout title="Channels | Zero1 Network" description="Browse all YouTube channels featured on Zero1 Network">
  <main class="container max-w-7xl mx-auto px-6 py-12">
    <div class="mb-12">
      <h1 class="text-4xl font-bold text-gray-900 mb-4">Creator Channels</h1>
      <p class="text-lg text-gray-600 mb-8">
        Discover all {channelEntries.length} creators featured on Zero1 Network, organized by category.
      </p>
      
      <div class="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
        <div class="bg-white rounded-lg border border-gray-100 p-6 text-center">
          <div class="text-3xl font-bold text-gray-900 mb-2">{channelEntries.length}</div>
          <div class="text-sm text-gray-600">Total Channels</div>
        </div>
        <div class="bg-white rounded-lg border border-gray-100 p-6 text-center">
          <div class="text-3xl font-bold text-gray-900 mb-2">{categories.length}</div>
          <div class="text-sm text-gray-600">Categories</div>
        </div>
        <div class="bg-white rounded-lg border border-gray-100 p-6 text-center">
          <div class="text-3xl font-bold text-gray-900 mb-2">
            {channelEntries.reduce((sum, [, channel]) => sum + channel.videos.length, 0)}
          </div>
          <div class="text-sm text-gray-600">Total Videos</div>
        </div>
      </div>
    </div>

    {categories.map(category => (
      <section class="mb-12">
        <h2 class="text-2xl font-bold text-gray-900 mb-6 capitalize">
          {category} Channels
        </h2>
        
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {channelsByCategory[category].map(channel => (
            <div class="bg-white rounded-lg border border-gray-100 p-6 hover:border-gray-200 transition-colors hover:shadow-sm">
              <div class="flex items-start justify-between mb-4">
                <div class="flex-1">
                  <h3 class="text-lg font-semibold text-gray-900 mb-2">
                    <a 
                      href={`https://www.youtube.com/channel/${channel.id}`}
                      target="_blank" 
                      rel="noopener noreferrer"
                      class="hover:text-blue-600 transition-colors"
                    >
                      {channel.name}
                    </a>
                  </h3>
                  <ChannelBadge name={category} color={channel.color} />
                </div>
                <div class="flex items-center gap-2">
                  <a 
                    href={`https://www.youtube.com/channel/${channel.id}`}
                    target="_blank" 
                    rel="noopener noreferrer"
                    class="text-gray-400 hover:text-red-600 transition-colors"
                    title="Visit YouTube Channel"
                  >
                    <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 24 24">
                      <path d="M23.498 6.186a3.016 3.016 0 0 0-2.122-2.136C19.505 3.545 12 3.545 12 3.545s-7.505 0-9.377.505A3.017 3.017 0 0 0 .502 6.186C0 8.07 0 12 0 12s0 3.93.502 5.814a3.016 3.016 0 0 0 2.122 2.136c1.871.505 9.376.505 9.376.505s7.505 0 9.377-.505a3.015 3.015 0 0 0 2.122-2.136C24 15.93 24 12 24 12s0-3.93-.502-5.814zM9.545 15.568V8.432L15.818 12l-6.273 3.568z"/>
                    </svg>
                  </a>
                  <div class={`w-3 h-3 rounded-full ${
                    channel.fetchStatus === 'success' ? 'bg-green-400' : 'bg-red-400'
                  }`} title={`Status: ${channel.fetchStatus}`}></div>
                </div>
              </div>
              
              <div class="space-y-3 mb-4">
                <div class="flex justify-between text-sm">
                  <span class="text-gray-600">Videos</span>
                  <span class="font-medium text-gray-900">{channel.videos.length}</span>
                </div>
                <div class="flex justify-between text-sm">
                  <span class="text-gray-600">Last Updated</span>
                  <span class="font-medium text-gray-900">
                    {formatTimeAgo(channel.lastFetched)}
                  </span>
                </div>
                {channel.fetchDuration && (
                  <div class="flex justify-between text-sm">
                    <span class="text-gray-600">Fetch Time</span>
                    <span class="font-medium text-gray-900">
                      {Math.round(channel.fetchDuration / 1000)}s
                    </span>
                  </div>
                )}
              </div>

              {channel.videos.length > 0 && (
                <div class="border-t border-gray-100 pt-4">
                  <h4 class="text-sm font-medium text-gray-900 mb-2">Latest Video</h4>
                  <div class="text-sm text-gray-600">
                    <div class="line-clamp-2 mb-1">{channel.videos[0].title}</div>
                    <div class="text-xs text-gray-500">
                      {formatTimeAgo(channel.videos[0].publishedAt)}
                    </div>
                  </div>
                </div>
              )}
              
              {channel.error && (
                <div class="border-t border-red-100 pt-4">
                  <div class="text-xs text-red-600 bg-red-50 px-2 py-1 rounded">
                    Error: {channel.error}
                  </div>
                </div>
              )}
            </div>
          ))}
        </div>
      </section>
    ))}

    {channelEntries.length === 0 && (
      <div class="text-center py-12">
        <div class="text-gray-400 mb-4">
          <svg class="w-16 h-16 mx-auto" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 10l4.553-2.276A1 1 0 0121 8.618v6.764a1 1 0 01-1.447.894L15 14M5 18h8a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v8a2 2 0 002 2z" />
          </svg>
        </div>
        <h3 class="text-lg font-medium text-gray-900 mb-2">No Channels Found</h3>
        <p class="text-gray-600">Channels will appear here once they're added to the configuration.</p>
      </div>
    )}
  </main>
</Layout>

